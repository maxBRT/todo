// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, user_id, title, description, priority, due_date) VALUES ($1, $2, $3, $4, $5, $6) RETURNING title, description, priority, due_date
`

type CreateTaskParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Title       string
	Description sql.NullString
	Priority    int32
	DueDate     sql.NullTime
}

type CreateTaskRow struct {
	Title       string
	Description sql.NullString
	Priority    int32
	DueDate     sql.NullTime
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (CreateTaskRow, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.DueDate,
	)
	var i CreateTaskRow
	err := row.Scan(
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.DueDate,
	)
	return i, err
}

const getTasksByUser = `-- name: GetTasksByUser :many
SELECT id, user_id, title, description, priority, completed, due_date, created_at, updated_at FROM tasks WHERE user_id = $1
`

func (q *Queries) GetTasksByUser(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Completed,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
